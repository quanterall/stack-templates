{-# START_FILE stack.yaml #-}
resolver: lts-18.14

packages:
- .

extra-deps:
- github: quanterall/qtility
  commit: 3c8f42c1e5380e3c7ecc9430c23882422405d4a5
  subdirs:
  - qtility
  # nix-sha256: sha256-92asx1Xzh2mxgCbayFh6L3p6cSXznlw+jkoOTqibEiI=

nix:
  enable: false
  packages: 
  - zlib
  - postgresql

{-# START_FILE .devcontainer/docker-compose.yaml #-}
version: '3'

services:
  {{name}}:
    image: gonz/quanterall-application-development:lts-18.14
    volumes:
      - ..:/workspace:cached
      - ./build/stack-work:/workspace/.stack-work:cached
    command: /bin/sh -c "while sleep 1000; do :; done"

networks:
  default:
    driver: bridge

{-# START_FILE .devcontainer/devcontainer.json #-}
{
  "name": "{{name}}",
  "service": "{{name}}",
  "workspaceFolder": "/workspace",
  "dockerComposeFile": "./docker-compose.yaml",
  "extensions": [
    "sjurmillidahl.ormolu-vscode",
    "dramforever.vscode-ghc-simple",
    "lunaryorn.hlint",
    "gonzooo.at-notes",
    "sleistner.vscode-fileutils",
    "fayras.simple-new-file",
    "jcanero.hoogle-vscode"
  ],
  "settings": {
    "[haskell]": {
      "editor.tabSize": 2,
      "editor.formatOnSave": true,
      "editor.defaultFormatter": "sjurmillidahl.ormolu-vscode",
      "editor.renderIndentGuides": true
    }
  }
}

{-# START_FILE hie.yaml #-}
cradle:
  stack:
        component: {{name}}:lib

{-# START_FILE .gitignore #-}
*~
*.swp
tarballs/
.stack-work/
.devcontainer/build

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) 2019

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}} HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE README.md #-}
# {{name}}

## Execute  

* Run `stack exec -- {{name}}` to see "We're inside the application!"
* With `stack exec -- {{name}} --verbose` you will see the same message, with more logging.

## Run tests

`stack test`

## Development

You can run a local hoogle instance by issuing the following commands to make
the hoogle script executable and starting the hoogle server:

```bash
$ chmod +x dev-scripts/run-hoogle.sh
$ ./dev-scripts/run-hoogle.sh
```

The repository comes with a `.vscode/settings.json` file that sets the hoogle
vscode extension to point to the local hoogle instance, which means you can get
instant results right in your editor by bringing up the command palette and
executing "Hoogle Search" (or by pressing Shift+Alt+H by default).

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE TemplateHaskell #-}
module Main (main) where

import Qtility
import Types
import Run
import RIO.Process
import Options.Applicative.Simple
import qualified Paths_{{name-as-varid}}

main :: IO ()
main = do
  (options, ()) <- simpleOptions
    $(simpleVersion Paths_{{name-as-varid}}.version)
    "Header for command line arguments"
    "Program description, also for command line arguments"
    (Options
       <$> switch ( long "verbose"
                 <> short 'v'
                 <> help "Verbose output?"
                  )
    )
    empty
  lo <- logOptionsHandle stderr (optionsVerbose options)
  pc <- mkDefaultProcessContext
  withLogFunc lo $ \lf ->
    let app = App
          { appLogFunc = lf
          , appProcessContext = pc
          , appOptions = options
          }
     in runRIO app run

{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on Github at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.11 && < 10
- qtility
- rio

default-extensions:
- ApplicativeDo
- BangPatterns
- BinaryLiterals
- ConstraintKinds
- DataKinds
- DefaultSignatures
- DeriveDataTypeable
- DeriveFoldable
- DeriveFunctor
- DeriveGeneric
- DeriveTraversable
- DeriveLift
- DerivingStrategies
- DoAndIfThenElse
- DuplicateRecordFields
- EmptyDataDecls
- EmptyCase
- ExistentialQuantification
- FlexibleContexts
- FlexibleInstances
- FunctionalDependencies
- GADTs
- GeneralizedNewtypeDeriving
- InstanceSigs
- KindSignatures
- LambdaCase
- MultiParamTypeClasses
- MultiWayIf
- NamedFieldPuns
- NoImplicitPrelude
- OverloadedStrings
- PartialTypeSignatures
- PatternGuards
- PolyKinds
- RankNTypes
- RecordWildCards
- ScopedTypeVariables
- StandaloneDeriving
- TupleSections
- TypeFamilies
- TypeSynonymInstances
- ViewPatterns
- TypeApplications

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wpartial-fields
- -Wredundant-constraints
- -Wwarn=deprecations
- -Werror=incomplete-patterns

library:
  source-dirs: src

executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         app
    dependencies:
    - {{name}}
    - optparse-simple

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - hspec

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

{-# START_FILE src/Run.hs #-}
module Run (run) where

import Qtility
import Types

run :: RIO App ()
run = do
  logInfo "We're inside the application!"

{-# START_FILE src/Types.hs #-}
module Types where

import Qtility
import RIO.Process

-- | Command line arguments
data Options = Options
  { optionsVerbose :: !Bool
  }

data App = App
  { appLogFunc :: !LogFunc
  , appProcessContext :: !ProcessContext
  , appOptions :: !Options
  -- Add other app-specific configuration information here
  }

instance HasLogFunc App where
  logFuncL = lens appLogFunc (\x y -> x { appLogFunc = y })
instance HasProcessContext App where
  processContextL = lens appProcessContext (\x y -> x { appProcessContext = y })

{-# START_FILE src/Util.hs #-}
-- | Silly utility module, used to demonstrate how to write a test
-- case.
module Util
  ( plus2
  ) where

import Qtility

plus2 :: Int -> Int
plus2 = (+ 2)

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/UtilSpec.hs #-}
module UtilSpec (spec) where

import Qtility
import Types
import Util
import Test.Hspec
import Test.Hspec.QuickCheck

spec :: Spec
spec = do
  describe "plus2" $ do
    it "basic check" $ plus2 0 `shouldBe` 2
    it "overflow" $ plus2 maxBound `shouldBe` minBound + 1
    prop "minus 2" $ \i -> plus2 i - 2 `shouldBe` i

{-# START_FILE default.nix #-}
let
  # Read in the Niv sources
  sources = import ./nix/sources.nix {};
  # If ./nix/sources.nix file is not found run:
  #   niv init
  #   niv add input-output-hk/haskell.nix -n haskellNix

  # Fetch the haskell.nix commit we have pinned with Niv
  haskellNix = import sources.haskellNix {};
  # If haskellNix is not found run:
  #   niv add input-output-hk/haskell.nix -n haskellNix

  # Import nixpkgs and pass the haskell.nix provided nixpkgsArgs
  pkgs = import
    # haskell.nix provides access to the nixpkgs pins which are used by our CI,
    # hence you will be more likely to get cache hits when using these.
    # But you can also just use your own, e.g. '<nixpkgs>'.
    haskellNix.sources.nixpkgs-unstable
    # These arguments passed to nixpkgs, include some patches and also
    # the haskell.nix functionality itself as an overlay.
    haskellNix.nixpkgsArgs;
in pkgs.haskell-nix.project {
  # 'cleanGit' cleans a source directory based on the files known by git
  src = pkgs.haskell-nix.haskellLib.cleanGit {
    name = "{{name}}";
    src = ./.;
  };
}

{-# START_FILE shell.nix #-}
let
  pkgs = import <nixpkgs> { };
in (import ./default.nix).shellFor {
  withHoogle = true;

  tools = {
    cabal = "3.2.0.0";
    hlint = "latest";
    ormolu = "0.3.1.0";
  };

  exactDeps = true;
}

{-# START_FILE .ghci #-}
:set -package pretty-simple
:set -XOverloadedStrings
:set -interactive-print=Text.Pretty.Simple.pPrint
import qualified Prelude
:def hoogle \x -> Prelude.pure Prelude.$ ":!hoogle " Prelude.<> x
:set prompt "Q> "

{-# START_FILE .vscode/extensions.json #-}
{
	// See https://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.
	// Extension identifier format: ${publisher}.${name}. Example: vscode.csharp

	// List of extensions which should be recommended for users of this workspace.
	"recommendations": [
		"sjurmillidahl.ormolu-vscode",
    "dramforever.vscode-ghc-simple",
    "hoovercj.haskell-linter",
    "gonzooo.at-notes",
    "sleistner.vscode-fileutils",
    "fayras.simple-new-file",
    "jcanero.hoogle-vscode",
    "GoNZooo.hoogle-webview"
	],
	// List of extensions recommended by VS Code that should not be recommended for users of this workspace.
	"unwantedRecommendations": []
}

{-# START_FILE .vscode/settings.json #-}
{
  "hoogle-vscode.url": "http://localhost:8888/",
  "hoogle-vscode.maxResults": 10,
  "hoogle-webview.hoogleUrl": "http://localhost:8888/"  
}

{-# START_FILE dev-scripts/run-hoogle.sh #-}
#!/usr/bin/env sh

hoogle serve --local --host localhost --port 8888 --no-security-headers
