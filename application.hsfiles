{-# START_FILE stack.yaml #-}
resolver: lts-18.28

packages:
- .

extra-deps:
- github: quanterall/qtility
  commit: 01c4fc42756611da9d3dc04e9ac71ece6ae67268
  subdirs:
  - qtility
  # nix-sha256: sha256-n5zns3D/o1/J/3NJjTBkD9xXM/Lx9uR1BjDHOnoO9ew=

nix:
  packages: 
  - zlib
  - postgresql

{-# START_FILE .env #-}
# Put environment values here

{-# START_FILE .devcontainer/docker-compose.yaml #-}
version: '3'

services:
  {{name}}:
    image: gonz/quanterall-application-development:lts-18.28
    volumes:
      - ..:/workspace:cached
      - ./build/stack-work:/workspace/.stack-work:cached
    command: /bin/sh -c "while sleep 1000; do :; done"

networks:
  default:
    driver: bridge

{-# START_FILE .devcontainer/devcontainer.json #-}
{
  "name": "{{name}}",
  "service": "{{name}}",
  "workspaceFolder": "/workspace",
  "dockerComposeFile": "./docker-compose.yaml",
  "extensions": [
    "sjurmillidahl.ormolu-vscode",
    "dramforever.vscode-ghc-simple",
    "lunaryorn.hlint",
    "gonzooo.at-notes",
    "sleistner.vscode-fileutils",
    "fayras.simple-new-file",
    "jcanero.hoogle-vscode"
  ],
  "settings": {
    "[haskell]": {
      "editor.tabSize": 2,
      "editor.formatOnSave": true,
      "editor.defaultFormatter": "sjurmillidahl.ormolu-vscode",
      "editor.renderIndentGuides": true
    }
  }
}

{-# START_FILE hie.yaml #-}
cradle:
  stack:
    - path: "./src"
      component: "{{name}}:lib"

    - path: "./app/Main.hs"
      component: "{{name}}:exe:{{name}}"

    - path: "./app/Paths_{{name-as-varid}}.hs"
      component: "{{name}}:exe:{{name}}"

    - path: "./test"
      component: "{{name}}:test:{{name}}-test"

{-# START_FILE .gitignore #-}
*~
*.swp
tarballs/
.stack-work/
.devcontainer/build
.env

{-# START_FILE nix/sources.nix #-}
# This file has been generated by Niv.

let

  #
  # The fetchers. fetch_<type> fetches specs of type <type>.
  #

  fetch_file = pkgs: name: spec:
    let
      name' = sanitizeName name + "-src";
    in
      if spec.builtin or true then
        builtins_fetchurl { inherit (spec) url sha256; name = name'; }
      else
        pkgs.fetchurl { inherit (spec) url sha256; name = name'; };

  fetch_tarball = pkgs: name: spec:
    let
      name' = sanitizeName name + "-src";
    in
      if spec.builtin or true then
        builtins_fetchTarball { name = name'; inherit (spec) url sha256; }
      else
        pkgs.fetchzip { name = name'; inherit (spec) url sha256; };

  fetch_git = name: spec:
    let
      ref =
        if spec ? ref then spec.ref else
          if spec ? branch then "refs/heads/${spec.branch}" else
            if spec ? tag then "refs/tags/${spec.tag}" else
              abort "In git source '${name}': Please specify `ref`, `tag` or `branch`!";
    in
      builtins.fetchGit { url = spec.repo; inherit (spec) rev; inherit ref; };

  fetch_local = spec: spec.path;

  fetch_builtin-tarball = name: throw
    ''[${name}] The niv type "builtin-tarball" is deprecated. You should instead use `builtin = true`.
        $ niv modify ${name} -a type=tarball -a builtin=true'';

  fetch_builtin-url = name: throw
    ''[${name}] The niv type "builtin-url" will soon be deprecated. You should instead use `builtin = true`.
        $ niv modify ${name} -a type=file -a builtin=true'';

  #
  # Various helpers
  #

  # https://github.com/NixOS/nixpkgs/pull/83241/files#diff-c6f540a4f3bfa4b0e8b6bafd4cd54e8bR695
  sanitizeName = name:
    (
      concatMapStrings (s: if builtins.isList s then "-" else s)
        (
          builtins.split "[^[:alnum:]+._?=-]+"
            ((x: builtins.elemAt (builtins.match "\\.*(.*)" x) 0) name)
        )
    );

  # The set of packages used when specs are fetched using non-builtins.
  mkPkgs = sources: system:
    let
      sourcesNixpkgs =
        import (builtins_fetchTarball { inherit (sources.nixpkgs) url sha256; }) { inherit system; };
      hasNixpkgsPath = builtins.any (x: x.prefix == "nixpkgs") builtins.nixPath;
      hasThisAsNixpkgsPath = <nixpkgs> == ./.;
    in
      if builtins.hasAttr "nixpkgs" sources
      then sourcesNixpkgs
      else if hasNixpkgsPath && ! hasThisAsNixpkgsPath then
        import <nixpkgs> {}
      else
        abort
          ''
            Please specify either <nixpkgs> (through -I or NIX_PATH=nixpkgs=...) or
            add a package called "nixpkgs" to your sources.json.
          '';

  # The actual fetching function.
  fetch = pkgs: name: spec:

    if ! builtins.hasAttr "type" spec then
      abort "ERROR: niv spec ${name} does not have a 'type' attribute"
    else if spec.type == "file" then fetch_file pkgs name spec
    else if spec.type == "tarball" then fetch_tarball pkgs name spec
    else if spec.type == "git" then fetch_git name spec
    else if spec.type == "local" then fetch_local spec
    else if spec.type == "builtin-tarball" then fetch_builtin-tarball name
    else if spec.type == "builtin-url" then fetch_builtin-url name
    else
      abort "ERROR: niv spec ${name} has unknown type ${builtins.toJSON spec.type}";

  # If the environment variable NIV_OVERRIDE_${name} is set, then use
  # the path directly as opposed to the fetched source.
  replace = name: drv:
    let
      saneName = stringAsChars (c: if isNull (builtins.match "[a-zA-Z0-9]" c) then "_" else c) name;
      ersatz = builtins.getEnv "NIV_OVERRIDE_${saneName}";
    in
      if ersatz == "" then drv else
        # this turns the string into an actual Nix path (for both absolute and
        # relative paths)
        if builtins.substring 0 1 ersatz == "/" then /. + ersatz else /. + builtins.getEnv "PWD" + "/${ersatz}";

  # Ports of functions for older nix versions

  # a Nix version of mapAttrs if the built-in doesn't exist
  mapAttrs = builtins.mapAttrs or (
    f: set: with builtins;
    listToAttrs (map (attr: { name = attr; value = f attr set.${attr}; }) (attrNames set))
  );

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/lists.nix#L295
  range = first: last: if first > last then [] else builtins.genList (n: first + n) (last - first + 1);

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/strings.nix#L257
  stringToCharacters = s: map (p: builtins.substring p 1 s) (range 0 (builtins.stringLength s - 1));

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/strings.nix#L269
  stringAsChars = f: s: concatStrings (map f (stringToCharacters s));
  concatMapStrings = f: list: concatStrings (map f list);
  concatStrings = builtins.concatStringsSep "";

  # https://github.com/NixOS/nixpkgs/blob/8a9f58a375c401b96da862d969f66429def1d118/lib/attrsets.nix#L331
  optionalAttrs = cond: as: if cond then as else {};

  # fetchTarball version that is compatible between all the versions of Nix
  builtins_fetchTarball = { url, name ? null, sha256 }@attrs:
    let
      inherit (builtins) lessThan nixVersion fetchTarball;
    in
      if lessThan nixVersion "1.12" then
        fetchTarball ({ inherit url; } // (optionalAttrs (!isNull name) { inherit name; }))
      else
        fetchTarball attrs;

  # fetchurl version that is compatible between all the versions of Nix
  builtins_fetchurl = { url, name ? null, sha256 }@attrs:
    let
      inherit (builtins) lessThan nixVersion fetchurl;
    in
      if lessThan nixVersion "1.12" then
        fetchurl ({ inherit url; } // (optionalAttrs (!isNull name) { inherit name; }))
      else
        fetchurl attrs;

  # Create the final "sources" from the config
  mkSources = config:
    mapAttrs (
      name: spec:
        if builtins.hasAttr "outPath" spec
        then abort
          "The values in sources.json should not have an 'outPath' attribute"
        else
          spec // { outPath = replace name (fetch config.pkgs name spec); }
    ) config.sources;

  # The "config" used by the fetchers
  mkConfig =
    { sourcesFile ? if builtins.pathExists ./sources.json then ./sources.json else null
    , sources ? if isNull sourcesFile then {} else builtins.fromJSON (builtins.readFile sourcesFile)
    , system ? builtins.currentSystem
    , pkgs ? mkPkgs sources system
    }: rec {
      # The sources, i.e. the attribute set of spec name to spec
      inherit sources;

      # The "pkgs" (evaluated nixpkgs) to use for e.g. non-builtin fetchers
      inherit pkgs;
    };

in
mkSources (mkConfig {}) // { __functor = _: settings: mkSources (mkConfig settings); }

{-# START_FILE nix/sources.json #-}
{
    "haskellNix": {
        "branch": "master",
        "description": "Alternative Haskell Infrastructure for Nixpkgs",
        "homepage": "https://input-output-hk.github.io/haskell.nix",
        "owner": "input-output-hk",
        "repo": "haskell.nix",
        "rev": "23553a5ec79ae422125c8cb0e0abec5e2ad487a9",
        "sha256": "07rm4qz0jspyas7myvac5x6rsf31hh3yc2a9rzxikr9kfsrmgdkb",
        "type": "tarball",
        "url": "https://github.com/input-output-hk/haskell.nix/archive/23553a5ec79ae422125c8cb0e0abec5e2ad487a9.tar.gz",
        "url_template": "https://github.com/<owner>/<repo>/archive/<rev>.tar.gz"
    },
    "niv": {
        "branch": "master",
        "description": "Easy dependency management for Nix projects",
        "homepage": "https://github.com/nmattia/niv",
        "owner": "nmattia",
        "repo": "niv",
        "rev": "5830a4dd348d77e39a0f3c4c762ff2663b602d4c",
        "sha256": "1d3lsrqvci4qz2hwjrcnd8h5vfkg8aypq3sjd4g3izbc8frwz5sm",
        "type": "tarball",
        "url": "https://github.com/nmattia/niv/archive/5830a4dd348d77e39a0f3c4c762ff2663b602d4c.tar.gz",
        "url_template": "https://github.com/<owner>/<repo>/archive/<rev>.tar.gz"
    }
}

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) 2019

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}} HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE README.md #-}
# {{name}}

## Execute  

* Run `stack exec -- {{name}}` to see "We're inside the application!"
* With `stack exec -- {{name}} --verbose` you will see the same message, with more logging.

## Install

Run `stack install` followed by `{{name}} --help` in order to see which command line options are
available.

## Run tests

`stack test`

## Development

You can run a local hoogle instance by issuing the following commands to make
the hoogle script executable and starting the hoogle server:

```bash
$ chmod +x dev-scripts/run-hoogle.sh
$ ./dev-scripts/run-hoogle.sh
```

The repository comes with a `.vscode/settings.json` file that sets the hoogle
vscode extension to point to the local hoogle instance, which means you can get
instant results right in your editor by bringing up the command palette and
executing "Hoogle Search" (or by pressing Shift+Alt+H by default).

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE app/Main.hs #-}
{-# LANGUAGE TemplateHaskell #-}

module Main (main) where

import Options.Applicative.Simple
import qualified Paths_{{name-as-varid}}
import Qtility
import Run
import Types

main :: IO ()
main = do
  (options, ()) <-
    simpleOptions
      $(simpleVersion Paths_{{name-as-varid}}.version)
      "Header for command line arguments"
      "Program description, also for command line arguments"
      ( Options
          <$> switch
            ( long "verbose"
                <> short 'v'
                <> help "Verbose output?"
            )
          <*> strOption
            ( long "environment-file"
                <> short 'e'
                <> metavar "DOTENV_FILE"
                <> help "Environment file to load during startup"
                <> value ".env"
            )
      )
      empty
  run options

{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on Github at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.11 && < 10
- qtility
- rio

default-extensions:
- ApplicativeDo
- BangPatterns
- BinaryLiterals
- ConstraintKinds
- DataKinds
- DefaultSignatures
- DeriveDataTypeable
- DeriveFoldable
- DeriveFunctor
- DeriveGeneric
- DeriveTraversable
- DeriveLift
- DerivingStrategies
- DoAndIfThenElse
- DuplicateRecordFields
- EmptyDataDecls
- EmptyCase
- ExistentialQuantification
- FlexibleContexts
- FlexibleInstances
- FunctionalDependencies
- GADTs
- GeneralizedNewtypeDeriving
- InstanceSigs
- KindSignatures
- LambdaCase
- MultiParamTypeClasses
- MultiWayIf
- NamedFieldPuns
- NoImplicitPrelude
- OverloadedStrings
- PartialTypeSignatures
- PatternGuards
- PolyKinds
- RankNTypes
- RecordWildCards
- ScopedTypeVariables
- StandaloneDeriving
- TupleSections
- TypeFamilies
- TypeSynonymInstances
- ViewPatterns
- TypeApplications

ghc-options:
- -Wall
- -Wcompat
- -Widentities
- -Wincomplete-record-updates
- -Wincomplete-uni-patterns
- -Wpartial-fields
- -Wredundant-constraints
- -Wwarn=deprecations
- -Werror=incomplete-patterns

library:
  source-dirs: src

executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         app
    dependencies:
    - {{name}}
    - optparse-simple

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    dependencies:
    - {{name}}
    - hspec

    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

{-# START_FILE src/Run.hs #-}
module Run (run) where

import Qtility
import RIO.Process (mkDefaultProcessContext)
import Types

run :: Options -> IO ()
run options = do
  loadDotEnvFile $ options ^. optionsEnvironmentFile
  lo <- logOptionsHandle stderr (options ^. optionsVerbose)
  pc <- mkDefaultProcessContext
  withLogFunc lo $ \lf ->
    let app =
          App
            { _appLogFunc = lf,
              _appProcessContext = pc,
              _appOptions = options
            }
     in runRIO app runApp

runApp :: RIO App ()
runApp = do
  logInfo "We're inside the application!"

{-# START_FILE src/Types.hs #-}
{-# LANGUAGE TemplateHaskell #-}

module Types where

import Qtility
import RIO.Process (HasProcessContext (..), ProcessContext)

-- | Command line arguments
data Options = Options
  { _optionsVerbose :: !Bool,
    _optionsEnvironmentFile :: !EnvironmentFile
  }

data App = App
  { _appLogFunc :: !LogFunc,
    _appProcessContext :: !ProcessContext,
    _appOptions :: !Options
  }

foldMapM makeLenses [''Options, ''App]

instance HasLogFunc App where
  logFuncL = appLogFunc

instance HasProcessContext App where
  processContextL = appProcessContext

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/ExampleSpec.hs #-}
module ExampleSpec (spec) where

import Qtility
import Types
import Test.Hspec
import Test.Hspec.QuickCheck

spec :: Spec
spec = do
  describe "`True` is `True`" $ do
    it "is so" $ do
      True `shouldBe` True

{-# START_FILE default.nix #-}
let
  # Read in the Niv sources
  sources = import ./nix/sources.nix {};
  # If ./nix/sources.nix file is not found run:
  #   niv init
  #   niv add input-output-hk/haskell.nix -n haskellNix

  # Fetch the haskell.nix commit we have pinned with Niv
  haskellNix = import sources.haskellNix {};
  # If haskellNix is not found run:
  #   niv add input-output-hk/haskell.nix -n haskellNix

  # Import nixpkgs and pass the haskell.nix provided nixpkgsArgs
  pkgs = import
    # haskell.nix provides access to the nixpkgs pins which are used by our CI,
    # hence you will be more likely to get cache hits when using these.
    # But you can also just use your own, e.g. '<nixpkgs>'.
    haskellNix.sources.nixpkgs-unstable
    # These arguments passed to nixpkgs, include some patches and also
    # the haskell.nix functionality itself as an overlay.
    haskellNix.nixpkgsArgs;
in pkgs.haskell-nix.project {
  # 'cleanGit' cleans a source directory based on the files known by git
  src = pkgs.haskell-nix.haskellLib.cleanGit {
    name = "{{name}}";
    src = ./.;
  };
}

{-# START_FILE shell.nix #-}
let
  pkgs = import <nixpkgs> { };
in (import ./default.nix).shellFor {
  withHoogle = true;

  tools = {
    cabal = "3.2.0.0";
    hlint = "latest";
    ormolu = "0.3.1.0";
  };

  exactDeps = true;
}

{-# START_FILE .ghci #-}
:set -package pretty-simple
:set -XOverloadedStrings
:set -interactive-print=Text.Pretty.Simple.pPrint
import qualified Prelude
:def hoogle \x -> Prelude.pure Prelude.$ ":!hoogle " Prelude.<> x
:set prompt "Q> "

{-# START_FILE .vscode/extensions.json #-}
{
	// See https://go.microsoft.com/fwlink/?LinkId=827846 to learn about workspace recommendations.
	// Extension identifier format: ${publisher}.${name}. Example: vscode.csharp

	// List of extensions which should be recommended for users of this workspace.
	"recommendations": [
		"sjurmillidahl.ormolu-vscode",
    "dramforever.vscode-ghc-simple",
    "hoovercj.haskell-linter",
    "gonzooo.at-notes",
    "sleistner.vscode-fileutils",
    "fayras.simple-new-file",
    "jcanero.hoogle-vscode",
    "GoNZooo.hoogle-webview"
	],
	// List of extensions recommended by VS Code that should not be recommended for users of this workspace.
	"unwantedRecommendations": []
}

{-# START_FILE .vscode/settings.json #-}
{
  "hoogle-vscode.url": "http://localhost:8888/",
  "hoogle-vscode.maxResults": 10,
  "hoogle-webview.hoogleUrl": "http://localhost:8888/"  
}

{-# START_FILE dev-scripts/run-hoogle.sh #-}
#!/usr/bin/env sh

hoogle serve --local --host localhost --port 8888 --no-security-headers
